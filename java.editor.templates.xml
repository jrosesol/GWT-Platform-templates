<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="action">import com.gwtplatform.dispatch.shared.UnsecuredActionImpl;&#13;
&#13;
/**&#13;
 * An action that can be sent using an {@link DispatchAsync} (client-side)&#13;
 * corresponding to a {@link com.gwtplatform.dispatch.server.Dispatch}&#13;
 * (server-side).&#13;
 */&#13;
public class ${actionName}Action extends&#13;
        UnsecuredActionImpl&lt;${actionName}Result&gt; {&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Data&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    private ${dataType} ${dataName};&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    public ${actionName}Action(final ${dataType} ${dataName}) {&#13;
        this.${dataName} = ${dataName};&#13;
    }&#13;
&#13;
    /**&#13;
     * For serialization only.&#13;
     */&#13;
    @SuppressWarnings("unused")&#13;
    private ${actionName}Action() {&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Get / Set&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="action_handler">import com.google.inject.Inject;&#13;
import com.google.inject.Provider;&#13;
${importStatic}&#13;
&#13;
import com.gwtplatform.dispatch.server.ExecutionContext;&#13;
import com.gwtplatform.dispatch.server.actionhandler.ActionHandler;&#13;
import com.gwtplatform.dispatch.shared.ActionException;&#13;
&#13;
import javax.servlet.ServletContext;&#13;
import javax.servlet.http.HttpServletRequest;&#13;
&#13;
/**&#13;
 * TODO : COMMENT THIS ACTION HANDLER&#13;
 * @author ${user}&#13;
 */&#13;
public class ${actionName}Handler implements&#13;
    ActionHandler&lt;${actionName}Action, ${actionName}Result&gt; {&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Data&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    private Provider&lt;HttpServletRequest&gt; requestProvider;&#13;
    private ServletContext servletContext;&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
    @Inject&#13;
    ${actionName}Handler(ServletContext servletContext,&#13;
        Provider&lt;HttpServletRequest&gt; requestProvider) {&#13;
      this.servletContext = servletContext;&#13;
      this.requestProvider = requestProvider;&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Overrides&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
    @Override&#13;
    public ${actionName}Result execute(${actionName}Action action,&#13;
        ExecutionContext context) throws ActionException {&#13;
&#13;
      return null;&#13;
    }&#13;
&#13;
    @Override&#13;
    public Class&lt;${actionName}Action&gt; getActionType() {&#13;
      return ${actionName}Action.class;&#13;
    }&#13;
&#13;
    @Override&#13;
    public void undo(${actionName}Action action, ${actionName}Result result,&#13;
        ExecutionContext context) throws ActionException {&#13;
      // Not undoable&#13;
    }&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="bindpresenter">        bindPresenter(${name}Presenter.class, ${name}Presenter.${name}ViewInterface.class,&#13;
                ${name}View.class, ${name}Presenter.${name}Proxy.class);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="Event">import com.google.gwt.event.shared.EventHandler;&#13;
import com.google.gwt.event.shared.GwtEvent;&#13;
import com.gwtplatform.mvp.client.HasEventBus;&#13;
&#13;
/**&#13;
 * ${description}&#13;
 *&#13;
 */&#13;
public class ${name}Event extends&#13;
        GwtEvent&lt;${name}Event.${name}Handler&gt; {&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Members&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    private static final Type&lt;${name}Handler&gt; TYPE = new Type&lt;${name}Handler&gt;();&#13;
    &#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Interfaces&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    public interface ${name}Handler extends EventHandler {&#13;
        public void on${name}(${name}Event event);&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    public ${name}Event() {&#13;
        &#13;
    }&#13;
    &#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Overrides&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Override&#13;
    public Type&lt;${name}Handler&gt; getAssociatedType() {&#13;
        return getType();&#13;
    }&#13;
&#13;
    @Override&#13;
    protected void dispatch(${name}Handler handler) {&#13;
        handler.on${name}(this);&#13;
    }&#13;
    &#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Functions&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    public static Type&lt;${name}Handler&gt; getType() {&#13;
        return TYPE;&#13;
    }&#13;
&#13;
    public static void fire(HasEventBus source) {&#13;
        source.fireEvent(new ${name}Event());&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Get / Set&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="presenter">import com.google.inject.Inject;&#13;
import com.gwtplatform.dispatch.client.DispatchAsync;&#13;
import com.gwtplatform.mvp.client.Presenter;&#13;
import com.gwtplatform.mvp.client.View;&#13;
import com.gwtplatform.mvp.client.annotations.NameToken;&#13;
import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;&#13;
import com.gwtplatform.mvp.client.proxy.Place;&#13;
import com.gwtplatform.mvp.client.proxy.PlaceManager;&#13;
import com.gwtplatform.mvp.client.proxy.Proxy;&#13;
import com.gwtplatform.mvp.client.proxy.RevealRootContentEvent;&#13;
&#13;
import com.google.gwt.event.shared.EventBus;&#13;
&#13;
&#13;
/**&#13;
 * ${name} Presenter implementation&#13;
 * ${description}&#13;
 */&#13;
public class ${name}Presenter extends&#13;
        Presenter&lt;${name}Presenter.${name}ViewInterface, ${name}Presenter.${name}Proxy&gt; {&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Members&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    public static final String nameToken = "${place}";&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Interfaces&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    &#13;
    /**&#13;
     * {@link ${name}Presenter}'s proxy.&#13;
     */&#13;
    @ProxyCodeSplit&#13;
    @NameToken(nameToken)&#13;
    public interface ${name}Proxy extends Proxy&lt;${name}Presenter&gt;, Place {&#13;
    }&#13;
&#13;
    /**&#13;
     * {@link ${name}Presenter}'s view.&#13;
     */&#13;
    public interface ${name}ViewInterface extends View {&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Inject&#13;
    public ${name}Presenter(EventBus eventBus, ${name}ViewInterface view, ${name}Proxy proxy,&#13;
            PlaceManager placeManager, DispatchAsync dispatcher) {&#13;
        super(eventBus, view, proxy);&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Handlers&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Overrides&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Override&#13;
    protected void revealInParent() {&#13;
        RevealRootContentEvent.fire(this, this);&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Functions&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Getters / Setters&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="presenter with UIBinder">import com.google.inject.Inject;&#13;
import com.gwtplatform.dispatch.client.DispatchAsync;&#13;
import com.gwtplatform.mvp.client.Presenter;&#13;
import com.gwtplatform.mvp.client.View;&#13;
import com.gwtplatform.mvp.client.annotations.NameToken;&#13;
import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;&#13;
import com.gwtplatform.mvp.client.proxy.Place;&#13;
import com.gwtplatform.mvp.client.proxy.PlaceManager;&#13;
import com.gwtplatform.mvp.client.proxy.Proxy;&#13;
import com.gwtplatform.mvp.client.proxy.RevealRootContentEvent;&#13;
&#13;
import com.google.gwt.event.shared.EventBus;&#13;
&#13;
&#13;
/**&#13;
 * ${name} Presenter implementation&#13;
 * ${description}&#13;
 */&#13;
public class ${name}Presenter extends&#13;
        Presenter&lt;${name}Presenter.${name}ViewInterface, ${name}Presenter.${name}Proxy&gt;&#13;
        implements ${name}UiHandlers {&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Members&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    public static final String nameToken = "${place}";&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Interfaces&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    &#13;
    /**&#13;
     * {@link ${name}Presenter}'s proxy.&#13;
     */&#13;
    @ProxyCodeSplit&#13;
    @NameToken(nameToken)&#13;
    public interface ${name}Proxy extends Proxy&lt;${name}Presenter&gt;, Place {&#13;
    }&#13;
&#13;
    /**&#13;
     * {@link ${name}Presenter}'s view.&#13;
     * Here it extends HasUiHandlers to be able to call setUiHandlers.&#13;
     */&#13;
    public interface ${name}ViewInterface extends View, HasUiHandlers&lt;${name}UiHandlers&gt; {&#13;
    }&#13;
    &#13;
    /*&#13;
     * This interface is the link between the view and the presenter.&#13;
     * The presenter has to implement this interface.&#13;
     * This interface should be declared separetly.&#13;
    public interface ${name}UiHandlers extends UiHandlers {&#13;
    }&#13;
    */&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Inject&#13;
    public ${name}Presenter(EventBus eventBus, ${name}ViewInterface view, ${name}Proxy proxy,&#13;
            PlaceManager placeManager, DispatchAsync dispatcher) {&#13;
        super(eventBus, view, proxy);&#13;
        getView().setUiHandlers(this);&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Handlers&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Overrides&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Override&#13;
    protected void revealInParent() {&#13;
        RevealRootContentEvent.fire(this, this);&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Functions&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Getters / Setters&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="result">import com.gwtplatform.dispatch.shared.Result;&#13;
&#13;
/**&#13;
 * TODO : COMPLETE THE LINK&#13;
 * The result of a {@link } action.&#13;
 */&#13;
public class ${actionName}Result implements Result {&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Data&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    private ${returnDataType} ${resultDataName};&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    public ${actionName}Result(final ${returnDataType} ${resultDataName}) {&#13;
        this.${resultDataName} = ${resultDataName};&#13;
    }&#13;
&#13;
    /**&#13;
     * For serialization only.&#13;
     */&#13;
    @SuppressWarnings("unused")&#13;
    private ${actionName}Result() {&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Get / Set&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="view">import com.google.gwt.user.client.ui.VerticalPanel;&#13;
import com.google.gwt.user.client.ui.Widget;&#13;
import com.gwtplatform.mvp.client.ViewImpl;&#13;
import com.google.inject.Inject;&#13;
&#13;
&#13;
/**&#13;
 * ${name} Presenter's view&#13;
 *&#13;
 */&#13;
public class ${name}View extends ViewImpl implements&#13;
        ${name}Presenter.${name}ViewInterface {&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Members&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    final public VerticalPanel mainPanel;&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Inject&#13;
    public ${name}View() {&#13;
        mainPanel = new VerticalPanel();&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Overrides&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Override&#13;
    public Widget asWidget() {&#13;
        return mainPanel;&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Functions&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
    &#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Get / Set&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="view with UIBinder">import com.google.gwt.user.client.ui.Widget;&#13;
import com.google.gwt.core.client.GWT;&#13;
import com.google.gwt.uibinder.client.UiBinder;&#13;
import com.google.gwt.user.client.ui.Widget;&#13;
import com.google.inject.Inject;&#13;
import com.gwtplatform.mvp.client.ViewWithUiHandlers;&#13;
&#13;
&#13;
/**&#13;
 * ${name} Presenter's view&#13;
 *&#13;
 */&#13;
public class ${name}View extends ViewWithUiHandlers&lt;${name}UiHandlers&gt; implements&#13;
        ${name}Presenter.${name}ViewInterface {&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Members&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    private static ${name}ViewUiBinder uiBinder = GWT&#13;
            .create(${name}ViewUiBinder.class);&#13;
    &#13;
    /*&#13;
     * @UiField annotaded vars. can be used here from your ui.xml template&#13;
     */&#13;
    //@UiField&#13;
    //SimplePanel simplePanel;&#13;
    &#13;
    private final Widget widget;&#13;
    &#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Interfaces&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
    interface ${name}ViewUiBinder extends UiBinder&lt;Widget, ${name}View&gt; {&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Constructors&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Inject&#13;
    public ${name}View() {&#13;
        widget = uiBinder.createAndBindUi(this);&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Overrides&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    @Override&#13;
    public Widget asWidget() {&#13;
        return widget;&#13;
    }&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Functions&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
    // Get / Set&#13;
    ///////////////////////////////////////////////////////////////////////////&#13;
&#13;
}&#13;
</template></templates>